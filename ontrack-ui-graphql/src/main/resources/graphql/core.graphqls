type Query {
    """Basic test service"""
    ping: String
}

type Mutation {
    """Basic test service"""
    ping: String
}

# =================================================================================
# Payload errors (duplicate from the programmatic ones)
# =================================================================================

"Representation of an error."
type PayloadUserError {
    "Programmatic code to be used by client. Usually the FQCN of the corresponding exception."
    exception: String!
    "Additional information about the location of this error."
    location: String
    "The error message"
    message: String!
}

"Interface implemented by all mutation payloads"
interface PayloadInterface {
    "List of errors"
    errors: [PayloadUserError]
}

# =================================================================================
# Scalars
# =================================================================================

scalar JSON

# =================================================================================
# User menu for Next UI
# =================================================================================

"""Group of user menu items"""
type UserMenuGroup {
    """ID of the group"""
    id: String!
    """Name of the group"""
    name: String!
    """Items in this group"""
    items: [UserMenuAction!]!
}

"""Item in the user menu"""
type UserMenuAction {
    """ID of the group this item belongs to"""
    groupId: String!
    """Extension contributing this user menu item"""
    extension: String!
    """Unique ID for this user menu item in the given extension"""
    id: String!
    """Display name for this user menu item"""
    name: String!
    """Local function to call, not a link"""
    local: Boolean
    """Arguments for a local function"""
    arguments: JSON
}

extend type Query {
    """List of user menu items"""
    userMenuItems: [UserMenuGroup!]!
}

# =================================================================================
# ACL
# =================================================================================

"""A named authorization"""
type Authorization {
    """Name of the authorization scope"""
    name: String!
    """Action to authorize"""
    action: String!
    """Authorized?"""
    authorized: Boolean!
}

extend type Query {
    """Getting a list of authorizations for the authenticated user"""
    authorizations: [Authorization!]!
}

# =================================================================================
# User change password
# =================================================================================

input ChangePasswordInput {
    oldPassword: String!
    newPassword: String!
}

extend type Mutation {
    """Changing the password of the current user"""
    changePassword(input: ChangePasswordInput!): ChangePasswordPayload
}

type ChangePasswordPayload implements PayloadInterface {
    "List of errors"
    errors: [PayloadUserError]
}

# =================================================================================
# Saving settings (generic mutation)
# =================================================================================

extend type Mutation {
    """Saving some generic settings"""
    saveSettings(input: SaveSettingsInput!): SaveSettingsPayload
}

input SaveSettingsInput {
    """ID of the settings"""
    id: String!
    """Values for the settings"""
    values: JSON!
}

type SaveSettingsPayload implements PayloadInterface {
    "List of errors"
    errors: [PayloadUserError]
}

# =================================================================================
# Dashboards
# =================================================================================

type WidgetLayout {
    x: Int!
    y: Int!
    w: Int!
    h: Int!
}

type WidgetInstance {
    uuid: String!
    key: String!
    config: JSON!
    layout: WidgetLayout!
}

type Widget {
    key: String!
    name: String!
    description: String!
    defaultConfig: JSON!
    preferredHeight: Int!
}

enum DashboardContextUserScope {
    PRIVATE
    SHARED
    BUILT_IN
}

type DashboardAuthorizations {
    edit: Boolean!
    share: Boolean!
    delete: Boolean!
}

type Dashboard {
    uuid: String!
    name: String!
    userScope: DashboardContextUserScope!
    widgets: [WidgetInstance!]!
    authorizations: DashboardAuthorizations!
}

extend type Query {
    """Gets the current dashboard"""
    userDashboard: Dashboard!
    """Gets the list of private & shared dashboards"""
    userDashboards: [Dashboard!]!
    """List of available widgets"""
    dashboardWidgets: [Widget!]!
}

extend type Mutation {
    """Saves a dashboard"""
    saveDashboard(input: SaveDashboardInput!): SaveDashboardPayload
    """Shares a dashboard"""
    shareDashboard(input: ShareDashboardInput!): ShareDashboardPayload
    """Deletes a dashboard"""
    deleteDashboard(input: DeleteDashboardInput!): DeletionPayload
    """Selects a dashboard"""
    selectDashboard(input: SelectDashboardInput!): SelectDashboardPayload
}

input WidgetInstanceInput {
    uuid: String
    key: String!
    config: JSON!
    layout: WidgetLayoutInput!
}

input WidgetLayoutInput {
    x: Int!
    y: Int!
    w: Int!
    h: Int!
}

input SaveDashboardInput {
    uuid: String
    name: String!
    userScope: DashboardContextUserScope!
    widgets: [WidgetInstanceInput!]!
    select: Boolean! = true
}

type SaveDashboardPayload implements PayloadInterface {
    "List of errors"
    errors: [PayloadUserError]
    """Saved dashboard"""
    dashboard: Dashboard
}

input ShareDashboardInput {
    """UUID of the dashboard to share"""
    uuid: String!
}

input DeleteDashboardInput {
    """UUID of the dashboard to delete"""
    uuid: String!
}

input SelectDashboardInput {
    """UUID of the dashboard to select"""
    uuid: String!
}

type ShareDashboardPayload implements PayloadInterface {
    "List of errors"
    errors: [PayloadUserError]
    """Shared dashboard"""
    dashboard: Dashboard
}

type DeletionPayload implements PayloadInterface {
    "List of errors"
    errors: [PayloadUserError]
}

type SelectDashboardPayload implements PayloadInterface {
    "List of errors"
    errors: [PayloadUserError]
}
